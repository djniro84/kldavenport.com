<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on Kevin Davenport Engineering &amp; ML blog</title>
    <link>https://kldavenport.com/tags/algorithms/</link>
    <description>Recent content in Algorithms on Kevin Davenport Engineering &amp; ML blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Feb 2019 11:54:26 -0800</lastBuildDate>
    
	<atom:link href="https://kldavenport.com/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Computability, Complexity, &amp; Algorithms Part 1</title>
      <link>https://kldavenport.com/complexity-computability-part1/</link>
      <pubDate>Thu, 21 Feb 2019 11:54:26 -0800</pubDate>
      
      <guid>https://kldavenport.com/complexity-computability-part1/</guid>
      <description>In this series of posts we’ll cover important concepts from computability theory; techniques for designing efficient algorithms for combinatorial, algebraic, and (if I can learn enough about it), number-theoretic problems. It’ll serve as a compact way to familiarize ourselves with basic concepts such as NP-Completeness from computational complexity theory, through Python.
   The only pre-requisite is that you know what Big-O notation is conceptually, even if you don’t have a good intuition for why certain algorithms are one complexity versus another.</description>
    </item>
    
  </channel>
</rss>